{
  "name": "twinny",
  "displayName": "twinny - AI Code Completion and Chat",
  "description": "Locally hosted AI code completion plugin for vscode",
  "version": "2.6.23",
  "icon": "assets/icon.png",
  "keywords": [
    "code-inference",
    "code-suggestion",
    "copilot",
    "localhost",
    "no-leaks",
    "private",
    "twinny",
    "ai",
    "ollama",
    "llama",
    "development",
    "extension",
    "llama-code",
    "snippets",
    "chat",
    "code-snippets",
    "autocomplete",
    "intellisense",
    "llama-ai",
    "vscode-extension"
  ],
  "repository": {
    "url": "https://github.com/rjmacarthy/twinny"
  },
  "license": "MIT",
  "publisher": "rjmacarthy",
  "engines": {
    "vscode": "^1.84.0"
  },
  "bugs": {
    "url": "https://github.com/rjmacarthy/twinny/issues"
  },
  "categories": [
    "Programming Languages",
    "Snippets",
    "Debuggers",
    "Formatters",
    "Machine Learning",
    "Education",
    "Testing",
    "Data Science",
    "Extension Packs",
    "Linters"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "author": {
    "name": "rjmacarthy"
  },
  "main": "./out/extension.js",
  "contributes": {
    "menus": {
      "editor/context": [
        {
          "when": "editorTextFocus",
          "command": "twinny.explain"
        },
        {
          "when": "editorTextFocus",
          "command": "twinny.refactor"
        },
        {
          "when": "editorTextFocus",
          "command": "twinny.addTypes"
        },
        {
          "when": "editorTextFocus",
          "command": "twinny.addTests"
        },
        {
          "when": "editorTextFocus",
          "command": "twinny.generateDocs"
        }
      ]
    },
    "commands": [
      {
        "command": "twinny.explain",
        "title": "Twinny - Explain"
      },
      {
        "command": "twinny.refactor",
        "title": "Twinny - Refactor"
      },
      {
        "command": "twinny.addTypes",
        "title": "Twinny - Add types"
      },
      {
        "command": "twinny.addTests",
        "title": "Twinny - Write tests"
      },
      {
        "command": "twinny.generateDocs",
        "title": "Twinny - Generate docs"
      },
      {
        "command": "twinny.enable",
        "shortTitle": "Enable twinny",
        "title": "Enable twinny"
      },
      {
        "command": "twinny.stopGeneration",
        "title": "Stop generation"
      },
      {
        "command": "twinny.disable",
        "title": "Disable twinny",
        "shortTitle": "Disable twinny"
      },
      {
        "command": "twinny.showSidebar",
        "shortTitle": "Enable twinny sidebar",
        "title": "Enable twinny sidebar"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "twinny-sidebar-view",
          "title": "twinny",
          "icon": "assets/twinny.png"
        }
      ]
    },
    "views": {
      "twinny-sidebar-view": [
        {
          "type": "webview",
          "id": "twinny-sidebar",
          "name": "twinny",
          "icon": "tw",
          "contextualTitle": "twinny"
        }
      ]
    },
    "configuration": {
      "title": "twinny",
      "properties": {
        "twinny.contextLength": {
          "type": "number",
          "default": 300,
          "description": "How many lines before and after to include in FIM prompts"
        },
        "twinny.debounceWait": {
          "type": "number",
          "default": 300,
          "description": "The amount of time to wait before triggering the next completion in milliseconds"
        },
        "twinny.enabled": {
          "order": 2,
          "type": "boolean",
          "default": true,
          "description": "Enable or disable twinny extension"
        },
        "twinny.chatModelName": {
          "order": 1,
          "type": "string",
          "default": "codellama:7b-instruct",
          "description": "The Ollama model for twinny chat completions"
        },
        "twinny.fimModelName": {
          "order": 0,
          "type": "string",
          "default": "codellama:7b-code",
          "description": "The Ollama model for twinny FIM completions"
        },
        "twinny.ollamaBaseUrl": {
          "type": "string",
          "default": "localhost",
          "description": "The Ollama API base url"
        },
        "twinny.ollamaApiPort": {
          "type": "number",
          "default": 11434,
          "description": "The Ollama API port"
        },
        "twinny.ollamaApiBearerToken": {
          "type": "string",
          "default": "",
          "description": "Whether to use a Bearer token for the Ollama API connection"
        },
        "twinny.useFileContext": {
          "type": "boolean",
          "default": true,
          "description": "Scan open documents and provide to completion prompt"
        },
        "twinny.temperature": {
          "type": "number",
          "default": 1,
          "description": "The temperature sent to Ollama with for model options"
        },
        "twinny.numPredictChat": {
          "type": "number",
          "default": 512,
          "description": "Max number of tokens to generate for chat completions"
        },
        "twinny.numPredictFim": {
          "type": "number",
          "default": -2,
          "description": "Max number of tokens to generate for fim completions"
        },
        "twinny.ollamaUseTls": {
          "type": "boolean",
          "default": false,
          "description": "Whether to use TLS for the Ollama API connection e.g https"
        },
        "twinny.enableCompletionCache": {
          "type": "boolean",
          "default": true,
          "description": "Whether or not to cache previously completed FIM completions with the same prompt"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "vscode:package": "npm exec vsce package",
    "vscode:publish": "npm exec vsce publish"
  },
  "devDependencies": {
    "@types/node": "^16.18.68",
    "@types/react-dom": "^18.2.18",
    "@types/react-syntax-highlighter": "^15.5.11",
    "@types/string_score": "^0.1.31",
    "@types/vscode": "^1.70.0",
    "@typescript-eslint/eslint-plugin": "^5.31.0",
    "@typescript-eslint/parser": "^5.31.0",
    "@vscode/vsce": "^2.18.0",
    "css-loader": "^6.8.1",
    "eslint": "^8.20.0",
    "style-loader": "^3.3.3",
    "ts-loader": "^9.5.1",
    "typescript": "^4.7.4",
    "webpack": "^5.74.0",
    "webpack-cli": "^4.10.0"
  },
  "dependencies": {
    "@microsoft/fast-react-wrapper": "^0.3.22",
    "@types/react": "^18.2.46",
    "@vscode/webview-ui-toolkit": "^1.4.0",
    "node-polyfill-webpack-plugin": "^3.0.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-markdown": "^9.0.1",
    "react-syntax-highlighter": "^15.5.0",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.0",
    "stream-http": "^3.2.0",
    "string_score": "^0.1.22"
  }
}
